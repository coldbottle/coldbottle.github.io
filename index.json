[{"content":"도커를 설명할 때 실행환경 가상화라고 한다.\nComputer Science에서 있었던 가상화/추상화를 위한 흐름을 살펴보면, 도커(Docker)가 무엇인지와 각광받는 이유를 알 수 있다.\nComputer Science가 전공이 아닌 독자들도 이해할 수 있게 설명하기 위해서 단편화된 내용들로 구성 하였습니다.\nVirtual Memory 질문으로 시작해보자! OS가 없는 상황에서 프로그램을 개발할 때 고려해야 하는 것은 무엇일까?\n이 질문에 대답하기에 앞서 OS가 하는 역할에 대해서 알면 위의 질문에 답을 할수 있을 것 같다.\nOS는 Computer의 자원(CPU, Memory, Storage등)을 관리하는 역할을 하는 S/W이다.\n그러므로 OS가 없는 상황에서 프로그램을 개발할 때는 프로그램의 Logic뿐만 아니라 Computer의 자원을 관리하는 Code도 구현해야 한다.\n그리고 OS에는 수 많은 프로세스가 동작하게 된다. 이 프로세스들은 서로 다른 S/W Engineer들의 의해서 개발된 프로그램들이 동작하고 있는 상태이다.\n전제 조건이 틀릴 수도 있지만, OS가 없는 상황에서 여러 다른 프로그램들이 사용하는 자원을 고려하면서 프로그램을 개발하는 것은 매우 어려운 일이다.\n그렇다면 OS는 어떻게 여러 프로세스(프로그램이 실행중인 상태)가 사용하는 Memory를 어떻게 관리하는 것일까?\n핵심은 2개의 문장으로 요약할 수 있다.\n 물리적 Memory가 얼마나 있든 상관없이 각 프로세스에게 똑같은 4GB(32bit OS기준)의 메모리가 있는 것처럼 보여준다. 프로세스가 사용하는 가상의 Memory주소를 물리적 Memory주소로 바꾸는 작업을 하고, 이 Mapping을 관리한다.  OS는 프로세스에게 Memory라는 자원을 추상화한 것이다. 이것을 Virtual Memory라고 한다.\nVirtual Memory의 핵심은 프로그램을 개발할 때 Memory관리하는 Code가 필요없게 만든 것이다.\nVirtual Machine 질문으로 시작해보자! 여러 OS에서 배포되는 프로그램을 개발할 때 고려해야 하는 것은 무엇일까?\n여러 OS에서 배포되기 위해서는 특정 OS와 관련된 것을 사용해서 프로그램을 개발하면 다른 OS에서는 동작하지 않게된다.\n즉, 특정 OS와 관련된 것을 사용하면 안된다.\n하지만 꼭 사용해야 한다면 이것을 어떻게 해결 할 수 있을까?\n기술은 간단하지 않지만 개념적으로 배포 환경의 OS가 무엇이든 그 OS위에서 개발할 때 사용했던 OS를 설치하고 개발한 프로그램을 실행하면 된다.\nVirtual Machine은 Machine을 추상화 하는 것으로 기존 Computer에 설치된 OS(Host)위에 OS(Guest)를 설치할 수 있게 만든다.\n즉, Virtual Machine의 핵심은 프로그램을 개발하고 배포할 때 생기는 OS의존성 문제를 해결해 주는 것이다.\n이렇게 하면 특정 OS에서 개발한 프로그램이 동작하는 데는 문제가 없다.\n하지만, 큰 단점이 하나 발생하게 된다.\n예를들어서 문자열을 적고 저장하는 프로그램이 아래와 같이 있다고 가정하자.\nwith open(\u0026#34;/path/to/file\u0026#34;, \u0026#34;w\u0026#34;) as f: f.write(\u0026#34;Hello World!\u0026#34;) 이 프로그램이 Host OS에서 동작하면\nPython Code -\u0026gt; OS(Host) Code -\u0026gt; Physical Disk\n위와 같은 경로로 물리적인 Disk에 저장될 것이다.\n하지만 이 프로그램이 Guest OS에서 동작한다면?\nPython Code -\u0026gt; OS(Guest) Code -\u0026gt; Virtual Disk -\u0026gt; OS(Host) Code -\u0026gt; Physical Disk\n즉, OS Code가 두번 실행 되게 된다. (Guest, Host)\n단편적인 예시지만 OS Code가 두번 실행되는 것이 계속되면 CPU Resource가 낭비되게 된다. 그리고 느려진다.\nDocker 질문으로 시작해보자! Virtual Machine의 단점인 OS Code가 두번 실행 되는 것을 없앨 수는 없을까?\n간단하게 답하면, OS를 공유하면 된다.\n그래서 나온 기술이 Container라는 기술이다.\nContainer라는 기술은 OS를 Share하면서 프로세스가 동작해야하는 실행 환경까지만 가상화 한것이다.\n그래서 실제로 같은 프로그램을 Host OS에서 실행했을 때의 성능과 Container에서 실행했을 때의 성능은 차이가 거의 없다.\n그렇다면 Docker는 무엇일까?\nDocker는 Container기술을 사용할 수 있게 만든 도구중 가장 유명한 도구이다.\n그래서 대부분 Docker하면 Container기술을 지칭하는 대명사가 되었다.\n결론 필자가 생각하는 Docker(Container)가 각광받는 이유는 배포하는 환경이 개발환경과 다르지 않게 하면서도 성능은 떨어지지 않게 만드는 기술이기 때문이다.\nDocker의 각종 명령어 및 Dockerfile 문법들을 배우기 전에 Docker가 나왔던 배경에 대해서 간단하게 적어보면 배우는데 도움이 되지 않을까 생각해본다.\n","permalink":"https://coldbottle.github.io/posts/docker/docker-prologue/","summary":"도커를 설명할 때 실행환경 가상화라고 한다.\nComputer Science에서 있었던 가상화/추상화를 위한 흐름을 살펴보면, 도커(Docker)가 무엇인지와 각광받는 이유를 알 수 있다.\nComputer Science가 전공이 아닌 독자들도 이해할 수 있게 설명하기 위해서 단편화된 내용들로 구성 하였습니다.\nVirtual Memory 질문으로 시작해보자! OS가 없는 상황에서 프로그램을 개발할 때 고려해야 하는 것은 무엇일까?\n이 질문에 대답하기에 앞서 OS가 하는 역할에 대해서 알면 위의 질문에 답을 할수 있을 것 같다.\nOS는 Computer의 자원(CPU, Memory, Storage등)을 관리하는 역할을 하는 S/W이다.","title":"도커(Docker) 프롤로그"},{"content":"이번 글에서는 지난글에 이어서 docker를 사용할 때 꼭 알고 있어야 하는 개념을 정리해보았다.\ndocker vs dockerd docker를 설치하게 되면 2가지 Software를 얻게 된다.\ndockerd가 docker daemon의 줄인 말로 Server의 역할을 하고 사용자의 입력을 받아서 Container를 제어합니다.\n다른 하나인 docker는 CLI(CommandLine Interface)형태로 제공된 Clinet으로 dockerd에게 명령을 전달할 때 사용된다.\nCLI 형태의 Client도 있지만, GUI(Graphic User Inferace)형태의 Client가 Docker Desktop for Window and Mac도 존재합니다.\nImage vs Container CS(Computer Science)전공인 독자들을 프로그램과 프로세스의 차이를 알고있을 것입니다.\n프로그램은 실행되지 않는 상태를 뜻합니다. 예를들어 test.py는 프로그램입니다.\n프로세스는 프로그램이 실행중인 상태를 뜻합니다. 예를들어 python test.py가 종료되지 않았다면 프로세스입니다.\ndocker에서도 Image와 Container는 프로그램과 프로세스의 관계랑 같습니다.\nImage는 미리 만들어 진것을 그대로 사용하기도 하고, 미리 만들어진 Image에서 자신에 입맛에 맞게 수정해서 사용하기도 합니다.\n자신만의 Image를 만들기 위해서는 Dockerfile을 작성해야 하고, docker build라는 명령어를 통해서 Image를 만들게 됩니다.\n이렇게 자신만의 Image또는 미리 만들어진 Image를 docker run라는 명령어를 통해서 Container가 됩니다.\n Dockerfile -\u0026gt; Image -\u0026gt; Container  Container Registry 위에서 언급한 미리 만들어진 Image를 그대로 사용하기 위해서는 Container Registry라는 개념을 알고있어야 합니다.\nContainer Registry는 원격 Image 저장소 입니다. Public으로 사용할 수 있는 저장소 중 가장 유명한 Dockerhub라는 것이 있습니다.\n다른 사람의 Image를 사용하기만 한다면 Dockerhub에 가입할 필요는 없습니다. 하지만 Dockerhub에 Image를 Upload하기 위해서는 가입해야 합니다.\n이러한 Public 저장소가 많이 있지만, 그 중에 GitHub Container Registry를 추천합니다. 최근에 Dockerhub에서 pull 횟수 제한 정책이 발표되면서 찾아보다가 알게되었습니다.\nImage를 정의한 Dockerfile을 관리하는 코드 저장소와 Dockerfile을 통해 만들어진 Image를 하나의 도메인에서 관리할 수 있다는 것이 매력적입니다.\n사용하는 방법은 공식 Guide를 보셔도 되고, GitHub Container Registry라는 글을 참조하시면 됩니다.\n","permalink":"https://coldbottle.github.io/posts/docker/docker-intro/","summary":"이번 글에서는 지난글에 이어서 docker를 사용할 때 꼭 알고 있어야 하는 개념을 정리해보았다.\ndocker vs dockerd docker를 설치하게 되면 2가지 Software를 얻게 된다.\ndockerd가 docker daemon의 줄인 말로 Server의 역할을 하고 사용자의 입력을 받아서 Container를 제어합니다.\n다른 하나인 docker는 CLI(CommandLine Interface)형태로 제공된 Clinet으로 dockerd에게 명령을 전달할 때 사용된다.\nCLI 형태의 Client도 있지만, GUI(Graphic User Inferace)형태의 Client가 Docker Desktop for Window and Mac도 존재합니다.\nImage vs Container CS(Computer Science)전공인 독자들을 프로그램과 프로세스의 차이를 알고있을 것입니다.","title":"도커(Docker) Intro"}]